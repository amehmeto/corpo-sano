# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ExerciseTemplate {
  id: ID!
  title: String!
}

type Session {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  performances: [Performance!]!
  workout: Workout!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Performance {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  sets: [Float!]!
  session: Session!
  exercise: Exercise!
}

type Exercise {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  template: ExerciseTemplate!
  numberOfSets: Float!
  numberOfReps: Float!
  finalRestTime: Float!
  interSetsRestTime: Float!
  position: Float!
  workout: Workout!
  performances: Performance!
}

type Workout {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  title: String!
  program: Program!
  exercises: [Exercise!]!
  sessions: [Session!]!
  scheduledDays: [String!]!
}

type Biometrics {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  height: Int!
  bodyFat: Int!
  lengthUnit: String!
  weight: Int!
  weightUnit: String!
  gender: String!
  birthday: DateTime!
  weightGoal: String!
}

type DailyTask {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  description: String!
  athlete: Athlete!
}

type Athlete {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  name: String!
  email: String!
  password: String!
  biometrics: Biometrics!
  dailyTasks: [DailyTask!]
  programs: [Program!]
}

type Program {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  version: Float!
  title: String!
  workouts: [Workout!]!
  athlete: Athlete!
}

type AccessToken {
  token: String!
}

type Query {
  getAllExerciseTemplates: [ExerciseTemplate!]!
  getExercise(exerciseId: ID!): Exercise!
  getAllPrograms: [Program!]!
  signIn(payload: AuthCredentialsInput!): AccessToken!
  getWorkout(workoutId: ID!): Workout!
  getAthlete(athleteId: ID!): Athlete!
}

input AuthCredentialsInput {
  email: String!
  password: String!
}

type Mutation {
  saveExerciseDetails(payload: ExerciseDetailsInput!): Exercise!
  deleteExercise(exerciseId: ID!): Boolean!
  createProgram(title: String!): Program!
  registerAthlete(payload: RegisterAthleteInput!): Athlete!
  sendConfirmationEmail(athleteId: ID!): Athlete!
  createWorkout(title: String!, programId: ID!): Workout!
  fillWorkoutWithExercises(payload: FillWorkoutWithExercisesInput!): Workout!
  scheduleWorkout(payload: ScheduleWorkoutInput!): Workout!
  updateWorkout(workoutId: ID!, payload: PatchWorkoutInput!): Workout!
  createSession(payload: CreateSessionInput!): Session!
}

input ExerciseDetailsInput {
  exerciseId: ID!
  numberOfSets: Int!
  numberOfReps: Int!
  finalRestTime: Int!
  interSetsRestTime: Int!
}

input RegisterAthleteInput {
  name: String!
  email: String!
  password: String!
  biometrics: BiometricsInput!
}

input BiometricsInput {
  height: Int!
  bodyFat: Int!
  lengthUnit: String!
  weight: Int!
  weightUnit: String!
  gender: String!
  birthday: DateTime!
  weightGoal: String!
}

input FillWorkoutWithExercisesInput {
  workoutId: ID!
  exerciseTemplateIds: [ID!]!
}

input ScheduleWorkoutInput {
  workoutId: ID!
  daysOfTheWeek: [WeekDays!]!
}

enum WeekDays {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

input PatchWorkoutInput {
  title: String
  exercises: [ExerciseInput!]
  scheduledDays: [String!]
}

input ExerciseInput {
  id: ID!
  template: ExerciseTemplateInput!
  numberOfSets: Float!
  numberOfReps: Float!
  finalRestTime: Float!
  interSetsRestTime: Float!
  position: Float!
}

input ExerciseTemplateInput {
  id: ID!
  title: String!
}

input CreateSessionInput {
  workoutId: ID!
  performances: [PerformanceInput!]!
}

input PerformanceInput {
  sets: [Int!]!
  exerciseId: ID!
}
